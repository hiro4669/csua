文法中の終端が無駄です

    LC
    RC
    COMMA
    COLON
    DOT
    IF
    ELSE
    ELSIF
    WHILE
    FOR
    RETURN
    BREAK
    CONTINUE


文法

    0 $accept: translation_unit $end

    1 translation_unit: definition_or_statement
    2                 | translation_unit definition_or_statement

    3 definition_or_statement: function_definition
    4                        | statement

    5 function_definition: type_specifier IDENTIFIER LP RP SEMICOLON

    6 statement: expression SEMICOLON
    7          | declaration_statement

    8 declaration_statement: type_specifier IDENTIFIER SEMICOLON
    9                      | type_specifier IDENTIFIER ASSIGN_T expression SEMICOLON

   10 type_specifier: BOOLEAN_T
   11               | INT_T
   12               | DOUBLE_T
   13               | STRING_T

   14 expression: assignment_expression

   15 assignment_expression: logical_or_expression
   16                      | postfix_expression assignment_operator assignment_expression

   17 assignment_operator: ASSIGN_T
   18                    | ADD_ASSIGN_T
   19                    | SUB_ASSIGN_T
   20                    | MUL_ASSIGN_T
   21                    | DIV_ASSIGN_T
   22                    | MOD_ASSIGN_T

   23 logical_or_expression: logical_and_expression
   24                      | logical_or_expression LOGICAL_OR logical_and_expression

   25 logical_and_expression: equality_expression
   26                       | logical_and_expression LOGICAL_AND equality_expression

   27 equality_expression: relational_expression
   28                    | equality_expression EQ relational_expression
   29                    | equality_expression NE relational_expression

   30 relational_expression: additive_expression
   31                      | relational_expression GT additive_expression
   32                      | relational_expression GE additive_expression
   33                      | relational_expression LT additive_expression
   34                      | relational_expression LE additive_expression

   35 additive_expression: multiplicative_expression
   36                    | additive_expression ADD multiplicative_expression
   37                    | additive_expression SUB multiplicative_expression

   38 multiplicative_expression: unary_expression
   39                          | multiplicative_expression MUL unary_expression
   40                          | multiplicative_expression DIV unary_expression
   41                          | multiplicative_expression MOD unary_expression

   42 unary_expression: postfix_expression
   43                 | SUB unary_expression
   44                 | EXCLAMATION unary_expression

   45 postfix_expression: primary_expression
   46                   | postfix_expression LP RP
   47                   | postfix_expression INCREMENT
   48                   | postfix_expression DECREMENT

   49 primary_expression: LP expression RP
   50                   | IDENTIFIER
   51                   | INT_LITERAL
   52                   | DOUBLE_LITERAL
   53                   | STRING_LITERAL
   54                   | TRUE_T
   55                   | FALSE_T


出現位置の規則による終端

    $end (0) 0
    error (256)
    LP (258) 5 46 49
    RP (259) 5 46 49
    LC (260)
    RC (261)
    COMMA (262)
    LOGICAL_AND (263) 26
    LOGICAL_OR (264) 24
    EQ (265) 28
    ASSIGN_T (266) 9 17
    NE (267) 29
    GT (268) 31
    GE (269) 32
    LE (270) 34
    LT (271) 33
    SEMICOLON (272) 5 6 8 9
    COLON (273)
    ADD (274) 36
    SUB (275) 37 43
    MUL (276) 39
    DIV (277) 40
    MOD (278) 41
    ADD_ASSIGN_T (279) 18
    SUB_ASSIGN_T (280) 19
    MUL_ASSIGN_T (281) 20
    DIV_ASSIGN_T (282) 21
    MOD_ASSIGN_T (283) 22
    INCREMENT (284) 47
    DECREMENT (285) 48
    EXCLAMATION (286) 44
    DOT (287)
    INT_LITERAL <iv> (288) 51
    DOUBLE_LITERAL <dv> (289) 52
    STRING_LITERAL <str> (290) 53
    IDENTIFIER <name> (291) 5 8 9 50
    IF (292)
    ELSE (293)
    ELSIF (294)
    WHILE (295)
    FOR (296)
    RETURN (297)
    BREAK (298)
    CONTINUE (299)
    TRUE_T (300) 54
    FALSE_T (301) 55
    BOOLEAN_T (302) 10
    INT_T (303) 11
    DOUBLE_T (304) 12
    STRING_T (305) 13


出現位置の規則による非終端

    $accept (51)
        左辺: 0
    translation_unit (52)
        左辺: 1 2
        右辺: 0 2
    definition_or_statement (53)
        左辺: 3 4
        右辺: 1 2
    function_definition <function_declaration> (54)
        左辺: 5
        右辺: 3
    statement <statement> (55)
        左辺: 6 7
        右辺: 4
    declaration_statement <statement> (56)
        左辺: 8 9
        右辺: 7
    type_specifier <type_specifier> (57)
        左辺: 10 11 12 13
        右辺: 5 8 9
    expression <expression> (58)
        左辺: 14
        右辺: 6 9 49
    assignment_expression <expression> (59)
        左辺: 15 16
        右辺: 14 16
    assignment_operator <assignment_operator> (60)
        左辺: 17 18 19 20 21 22
        右辺: 16
    logical_or_expression <expression> (61)
        左辺: 23 24
        右辺: 15 24
    logical_and_expression <expression> (62)
        左辺: 25 26
        右辺: 23 24 26
    equality_expression <expression> (63)
        左辺: 27 28 29
        右辺: 25 26 28 29
    relational_expression <expression> (64)
        左辺: 30 31 32 33 34
        右辺: 27 28 29 31 32 33 34
    additive_expression <expression> (65)
        左辺: 35 36 37
        右辺: 30 31 32 33 34 36 37
    multiplicative_expression <expression> (66)
        左辺: 38 39 40 41
        右辺: 35 36 37 39 40 41
    unary_expression <expression> (67)
        左辺: 42 43 44
        右辺: 38 39 40 41 43 44
    postfix_expression <expression> (68)
        左辺: 45 46 47 48
        右辺: 16 42 46 47 48
    primary_expression <expression> (69)
        左辺: 49 50 51 52 53 54 55
        右辺: 45


状態 0

    0 $accept: . translation_unit $end

    LP              shift, and go to state 1
    SUB             shift, and go to state 2
    EXCLAMATION     shift, and go to state 3
    INT_LITERAL     shift, and go to state 4
    DOUBLE_LITERAL  shift, and go to state 5
    STRING_LITERAL  shift, and go to state 6
    IDENTIFIER      shift, and go to state 7
    TRUE_T          shift, and go to state 8
    FALSE_T         shift, and go to state 9
    BOOLEAN_T       shift, and go to state 10
    INT_T           shift, and go to state 11
    DOUBLE_T        shift, and go to state 12
    STRING_T        shift, and go to state 13

    translation_unit           状態 14 に移行
    definition_or_statement    状態 15 に移行
    function_definition        状態 16 に移行
    statement                  状態 17 に移行
    declaration_statement      状態 18 に移行
    type_specifier             状態 19 に移行
    expression                 状態 20 に移行
    assignment_expression      状態 21 に移行
    logical_or_expression      状態 22 に移行
    logical_and_expression     状態 23 に移行
    equality_expression        状態 24 に移行
    relational_expression      状態 25 に移行
    additive_expression        状態 26 に移行
    multiplicative_expression  状態 27 に移行
    unary_expression           状態 28 に移行
    postfix_expression         状態 29 に移行
    primary_expression         状態 30 に移行


状態 1

   49 primary_expression: LP . expression RP

    LP              shift, and go to state 1
    SUB             shift, and go to state 2
    EXCLAMATION     shift, and go to state 3
    INT_LITERAL     shift, and go to state 4
    DOUBLE_LITERAL  shift, and go to state 5
    STRING_LITERAL  shift, and go to state 6
    IDENTIFIER      shift, and go to state 7
    TRUE_T          shift, and go to state 8
    FALSE_T         shift, and go to state 9

    expression                 状態 31 に移行
    assignment_expression      状態 21 に移行
    logical_or_expression      状態 22 に移行
    logical_and_expression     状態 23 に移行
    equality_expression        状態 24 に移行
    relational_expression      状態 25 に移行
    additive_expression        状態 26 に移行
    multiplicative_expression  状態 27 に移行
    unary_expression           状態 28 に移行
    postfix_expression         状態 29 に移行
    primary_expression         状態 30 に移行


状態 2

   43 unary_expression: SUB . unary_expression

    LP              shift, and go to state 1
    SUB             shift, and go to state 2
    EXCLAMATION     shift, and go to state 3
    INT_LITERAL     shift, and go to state 4
    DOUBLE_LITERAL  shift, and go to state 5
    STRING_LITERAL  shift, and go to state 6
    IDENTIFIER      shift, and go to state 7
    TRUE_T          shift, and go to state 8
    FALSE_T         shift, and go to state 9

    unary_expression    状態 32 に移行
    postfix_expression  状態 33 に移行
    primary_expression  状態 30 に移行


状態 3

   44 unary_expression: EXCLAMATION . unary_expression

    LP              shift, and go to state 1
    SUB             shift, and go to state 2
    EXCLAMATION     shift, and go to state 3
    INT_LITERAL     shift, and go to state 4
    DOUBLE_LITERAL  shift, and go to state 5
    STRING_LITERAL  shift, and go to state 6
    IDENTIFIER      shift, and go to state 7
    TRUE_T          shift, and go to state 8
    FALSE_T         shift, and go to state 9

    unary_expression    状態 34 に移行
    postfix_expression  状態 33 に移行
    primary_expression  状態 30 に移行


状態 4

   51 primary_expression: INT_LITERAL .

    $default  規則 51 を使って還元 (primary_expression)


状態 5

   52 primary_expression: DOUBLE_LITERAL .

    $default  規則 52 を使って還元 (primary_expression)


状態 6

   53 primary_expression: STRING_LITERAL .

    $default  規則 53 を使って還元 (primary_expression)


状態 7

   50 primary_expression: IDENTIFIER .

    $default  規則 50 を使って還元 (primary_expression)


状態 8

   54 primary_expression: TRUE_T .

    $default  規則 54 を使って還元 (primary_expression)


状態 9

   55 primary_expression: FALSE_T .

    $default  規則 55 を使って還元 (primary_expression)


状態 10

   10 type_specifier: BOOLEAN_T .

    $default  規則 10 を使って還元 (type_specifier)


状態 11

   11 type_specifier: INT_T .

    $default  規則 11 を使って還元 (type_specifier)


状態 12

   12 type_specifier: DOUBLE_T .

    $default  規則 12 を使って還元 (type_specifier)


状態 13

   13 type_specifier: STRING_T .

    $default  規則 13 を使って還元 (type_specifier)


状態 14

    0 $accept: translation_unit . $end
    2 translation_unit: translation_unit . definition_or_statement

    $end            shift, and go to state 35
    LP              shift, and go to state 1
    SUB             shift, and go to state 2
    EXCLAMATION     shift, and go to state 3
    INT_LITERAL     shift, and go to state 4
    DOUBLE_LITERAL  shift, and go to state 5
    STRING_LITERAL  shift, and go to state 6
    IDENTIFIER      shift, and go to state 7
    TRUE_T          shift, and go to state 8
    FALSE_T         shift, and go to state 9
    BOOLEAN_T       shift, and go to state 10
    INT_T           shift, and go to state 11
    DOUBLE_T        shift, and go to state 12
    STRING_T        shift, and go to state 13

    definition_or_statement    状態 36 に移行
    function_definition        状態 16 に移行
    statement                  状態 17 に移行
    declaration_statement      状態 18 に移行
    type_specifier             状態 19 に移行
    expression                 状態 20 に移行
    assignment_expression      状態 21 に移行
    logical_or_expression      状態 22 に移行
    logical_and_expression     状態 23 に移行
    equality_expression        状態 24 に移行
    relational_expression      状態 25 に移行
    additive_expression        状態 26 に移行
    multiplicative_expression  状態 27 に移行
    unary_expression           状態 28 に移行
    postfix_expression         状態 29 に移行
    primary_expression         状態 30 に移行


状態 15

    1 translation_unit: definition_or_statement .

    $default  規則 1 を使って還元 (translation_unit)


状態 16

    3 definition_or_statement: function_definition .

    $default  規則 3 を使って還元 (definition_or_statement)


状態 17

    4 definition_or_statement: statement .

    $default  規則 4 を使って還元 (definition_or_statement)


状態 18

    7 statement: declaration_statement .

    $default  規則 7 を使って還元 (statement)


状態 19

    5 function_definition: type_specifier . IDENTIFIER LP RP SEMICOLON
    8 declaration_statement: type_specifier . IDENTIFIER SEMICOLON
    9                      | type_specifier . IDENTIFIER ASSIGN_T expression SEMICOLON

    IDENTIFIER  shift, and go to state 37


状態 20

    6 statement: expression . SEMICOLON

    SEMICOLON  shift, and go to state 38


状態 21

   14 expression: assignment_expression .

    $default  規則 14 を使って還元 (expression)


状態 22

   15 assignment_expression: logical_or_expression .
   24 logical_or_expression: logical_or_expression . LOGICAL_OR logical_and_expression

    LOGICAL_OR  shift, and go to state 39

    $default  規則 15 を使って還元 (assignment_expression)


状態 23

   23 logical_or_expression: logical_and_expression .
   26 logical_and_expression: logical_and_expression . LOGICAL_AND equality_expression

    LOGICAL_AND  shift, and go to state 40

    $default  規則 23 を使って還元 (logical_or_expression)


状態 24

   25 logical_and_expression: equality_expression .
   28 equality_expression: equality_expression . EQ relational_expression
   29                    | equality_expression . NE relational_expression

    EQ  shift, and go to state 41
    NE  shift, and go to state 42

    $default  規則 25 を使って還元 (logical_and_expression)


状態 25

   27 equality_expression: relational_expression .
   31 relational_expression: relational_expression . GT additive_expression
   32                      | relational_expression . GE additive_expression
   33                      | relational_expression . LT additive_expression
   34                      | relational_expression . LE additive_expression

    GT  shift, and go to state 43
    GE  shift, and go to state 44
    LE  shift, and go to state 45
    LT  shift, and go to state 46

    $default  規則 27 を使って還元 (equality_expression)


状態 26

   30 relational_expression: additive_expression .
   36 additive_expression: additive_expression . ADD multiplicative_expression
   37                    | additive_expression . SUB multiplicative_expression

    ADD  shift, and go to state 47
    SUB  shift, and go to state 48

    $default  規則 30 を使って還元 (relational_expression)


状態 27

   35 additive_expression: multiplicative_expression .
   39 multiplicative_expression: multiplicative_expression . MUL unary_expression
   40                          | multiplicative_expression . DIV unary_expression
   41                          | multiplicative_expression . MOD unary_expression

    MUL  shift, and go to state 49
    DIV  shift, and go to state 50
    MOD  shift, and go to state 51

    $default  規則 35 を使って還元 (additive_expression)


状態 28

   38 multiplicative_expression: unary_expression .

    $default  規則 38 を使って還元 (multiplicative_expression)


状態 29

   16 assignment_expression: postfix_expression . assignment_operator assignment_expression
   42 unary_expression: postfix_expression .
   46 postfix_expression: postfix_expression . LP RP
   47                   | postfix_expression . INCREMENT
   48                   | postfix_expression . DECREMENT

    LP            shift, and go to state 52
    ASSIGN_T      shift, and go to state 53
    ADD_ASSIGN_T  shift, and go to state 54
    SUB_ASSIGN_T  shift, and go to state 55
    MUL_ASSIGN_T  shift, and go to state 56
    DIV_ASSIGN_T  shift, and go to state 57
    MOD_ASSIGN_T  shift, and go to state 58
    INCREMENT     shift, and go to state 59
    DECREMENT     shift, and go to state 60

    $default  規則 42 を使って還元 (unary_expression)

    assignment_operator  状態 61 に移行


状態 30

   45 postfix_expression: primary_expression .

    $default  規則 45 を使って還元 (postfix_expression)


状態 31

   49 primary_expression: LP expression . RP

    RP  shift, and go to state 62


状態 32

   43 unary_expression: SUB unary_expression .

    $default  規則 43 を使って還元 (unary_expression)


状態 33

   42 unary_expression: postfix_expression .
   46 postfix_expression: postfix_expression . LP RP
   47                   | postfix_expression . INCREMENT
   48                   | postfix_expression . DECREMENT

    LP         shift, and go to state 52
    INCREMENT  shift, and go to state 59
    DECREMENT  shift, and go to state 60

    $default  規則 42 を使って還元 (unary_expression)


状態 34

   44 unary_expression: EXCLAMATION unary_expression .

    $default  規則 44 を使って還元 (unary_expression)


状態 35

    0 $accept: translation_unit $end .

    $default  受け入れる


状態 36

    2 translation_unit: translation_unit definition_or_statement .

    $default  規則 2 を使って還元 (translation_unit)


状態 37

    5 function_definition: type_specifier IDENTIFIER . LP RP SEMICOLON
    8 declaration_statement: type_specifier IDENTIFIER . SEMICOLON
    9                      | type_specifier IDENTIFIER . ASSIGN_T expression SEMICOLON

    LP         shift, and go to state 63
    ASSIGN_T   shift, and go to state 64
    SEMICOLON  shift, and go to state 65


状態 38

    6 statement: expression SEMICOLON .

    $default  規則 6 を使って還元 (statement)


状態 39

   24 logical_or_expression: logical_or_expression LOGICAL_OR . logical_and_expression

    LP              shift, and go to state 1
    SUB             shift, and go to state 2
    EXCLAMATION     shift, and go to state 3
    INT_LITERAL     shift, and go to state 4
    DOUBLE_LITERAL  shift, and go to state 5
    STRING_LITERAL  shift, and go to state 6
    IDENTIFIER      shift, and go to state 7
    TRUE_T          shift, and go to state 8
    FALSE_T         shift, and go to state 9

    logical_and_expression     状態 66 に移行
    equality_expression        状態 24 に移行
    relational_expression      状態 25 に移行
    additive_expression        状態 26 に移行
    multiplicative_expression  状態 27 に移行
    unary_expression           状態 28 に移行
    postfix_expression         状態 33 に移行
    primary_expression         状態 30 に移行


状態 40

   26 logical_and_expression: logical_and_expression LOGICAL_AND . equality_expression

    LP              shift, and go to state 1
    SUB             shift, and go to state 2
    EXCLAMATION     shift, and go to state 3
    INT_LITERAL     shift, and go to state 4
    DOUBLE_LITERAL  shift, and go to state 5
    STRING_LITERAL  shift, and go to state 6
    IDENTIFIER      shift, and go to state 7
    TRUE_T          shift, and go to state 8
    FALSE_T         shift, and go to state 9

    equality_expression        状態 67 に移行
    relational_expression      状態 25 に移行
    additive_expression        状態 26 に移行
    multiplicative_expression  状態 27 に移行
    unary_expression           状態 28 に移行
    postfix_expression         状態 33 に移行
    primary_expression         状態 30 に移行


状態 41

   28 equality_expression: equality_expression EQ . relational_expression

    LP              shift, and go to state 1
    SUB             shift, and go to state 2
    EXCLAMATION     shift, and go to state 3
    INT_LITERAL     shift, and go to state 4
    DOUBLE_LITERAL  shift, and go to state 5
    STRING_LITERAL  shift, and go to state 6
    IDENTIFIER      shift, and go to state 7
    TRUE_T          shift, and go to state 8
    FALSE_T         shift, and go to state 9

    relational_expression      状態 68 に移行
    additive_expression        状態 26 に移行
    multiplicative_expression  状態 27 に移行
    unary_expression           状態 28 に移行
    postfix_expression         状態 33 に移行
    primary_expression         状態 30 に移行


状態 42

   29 equality_expression: equality_expression NE . relational_expression

    LP              shift, and go to state 1
    SUB             shift, and go to state 2
    EXCLAMATION     shift, and go to state 3
    INT_LITERAL     shift, and go to state 4
    DOUBLE_LITERAL  shift, and go to state 5
    STRING_LITERAL  shift, and go to state 6
    IDENTIFIER      shift, and go to state 7
    TRUE_T          shift, and go to state 8
    FALSE_T         shift, and go to state 9

    relational_expression      状態 69 に移行
    additive_expression        状態 26 に移行
    multiplicative_expression  状態 27 に移行
    unary_expression           状態 28 に移行
    postfix_expression         状態 33 に移行
    primary_expression         状態 30 に移行


状態 43

   31 relational_expression: relational_expression GT . additive_expression

    LP              shift, and go to state 1
    SUB             shift, and go to state 2
    EXCLAMATION     shift, and go to state 3
    INT_LITERAL     shift, and go to state 4
    DOUBLE_LITERAL  shift, and go to state 5
    STRING_LITERAL  shift, and go to state 6
    IDENTIFIER      shift, and go to state 7
    TRUE_T          shift, and go to state 8
    FALSE_T         shift, and go to state 9

    additive_expression        状態 70 に移行
    multiplicative_expression  状態 27 に移行
    unary_expression           状態 28 に移行
    postfix_expression         状態 33 に移行
    primary_expression         状態 30 に移行


状態 44

   32 relational_expression: relational_expression GE . additive_expression

    LP              shift, and go to state 1
    SUB             shift, and go to state 2
    EXCLAMATION     shift, and go to state 3
    INT_LITERAL     shift, and go to state 4
    DOUBLE_LITERAL  shift, and go to state 5
    STRING_LITERAL  shift, and go to state 6
    IDENTIFIER      shift, and go to state 7
    TRUE_T          shift, and go to state 8
    FALSE_T         shift, and go to state 9

    additive_expression        状態 71 に移行
    multiplicative_expression  状態 27 に移行
    unary_expression           状態 28 に移行
    postfix_expression         状態 33 に移行
    primary_expression         状態 30 に移行


状態 45

   34 relational_expression: relational_expression LE . additive_expression

    LP              shift, and go to state 1
    SUB             shift, and go to state 2
    EXCLAMATION     shift, and go to state 3
    INT_LITERAL     shift, and go to state 4
    DOUBLE_LITERAL  shift, and go to state 5
    STRING_LITERAL  shift, and go to state 6
    IDENTIFIER      shift, and go to state 7
    TRUE_T          shift, and go to state 8
    FALSE_T         shift, and go to state 9

    additive_expression        状態 72 に移行
    multiplicative_expression  状態 27 に移行
    unary_expression           状態 28 に移行
    postfix_expression         状態 33 に移行
    primary_expression         状態 30 に移行


状態 46

   33 relational_expression: relational_expression LT . additive_expression

    LP              shift, and go to state 1
    SUB             shift, and go to state 2
    EXCLAMATION     shift, and go to state 3
    INT_LITERAL     shift, and go to state 4
    DOUBLE_LITERAL  shift, and go to state 5
    STRING_LITERAL  shift, and go to state 6
    IDENTIFIER      shift, and go to state 7
    TRUE_T          shift, and go to state 8
    FALSE_T         shift, and go to state 9

    additive_expression        状態 73 に移行
    multiplicative_expression  状態 27 に移行
    unary_expression           状態 28 に移行
    postfix_expression         状態 33 に移行
    primary_expression         状態 30 に移行


状態 47

   36 additive_expression: additive_expression ADD . multiplicative_expression

    LP              shift, and go to state 1
    SUB             shift, and go to state 2
    EXCLAMATION     shift, and go to state 3
    INT_LITERAL     shift, and go to state 4
    DOUBLE_LITERAL  shift, and go to state 5
    STRING_LITERAL  shift, and go to state 6
    IDENTIFIER      shift, and go to state 7
    TRUE_T          shift, and go to state 8
    FALSE_T         shift, and go to state 9

    multiplicative_expression  状態 74 に移行
    unary_expression           状態 28 に移行
    postfix_expression         状態 33 に移行
    primary_expression         状態 30 に移行


状態 48

   37 additive_expression: additive_expression SUB . multiplicative_expression

    LP              shift, and go to state 1
    SUB             shift, and go to state 2
    EXCLAMATION     shift, and go to state 3
    INT_LITERAL     shift, and go to state 4
    DOUBLE_LITERAL  shift, and go to state 5
    STRING_LITERAL  shift, and go to state 6
    IDENTIFIER      shift, and go to state 7
    TRUE_T          shift, and go to state 8
    FALSE_T         shift, and go to state 9

    multiplicative_expression  状態 75 に移行
    unary_expression           状態 28 に移行
    postfix_expression         状態 33 に移行
    primary_expression         状態 30 に移行


状態 49

   39 multiplicative_expression: multiplicative_expression MUL . unary_expression

    LP              shift, and go to state 1
    SUB             shift, and go to state 2
    EXCLAMATION     shift, and go to state 3
    INT_LITERAL     shift, and go to state 4
    DOUBLE_LITERAL  shift, and go to state 5
    STRING_LITERAL  shift, and go to state 6
    IDENTIFIER      shift, and go to state 7
    TRUE_T          shift, and go to state 8
    FALSE_T         shift, and go to state 9

    unary_expression    状態 76 に移行
    postfix_expression  状態 33 に移行
    primary_expression  状態 30 に移行


状態 50

   40 multiplicative_expression: multiplicative_expression DIV . unary_expression

    LP              shift, and go to state 1
    SUB             shift, and go to state 2
    EXCLAMATION     shift, and go to state 3
    INT_LITERAL     shift, and go to state 4
    DOUBLE_LITERAL  shift, and go to state 5
    STRING_LITERAL  shift, and go to state 6
    IDENTIFIER      shift, and go to state 7
    TRUE_T          shift, and go to state 8
    FALSE_T         shift, and go to state 9

    unary_expression    状態 77 に移行
    postfix_expression  状態 33 に移行
    primary_expression  状態 30 に移行


状態 51

   41 multiplicative_expression: multiplicative_expression MOD . unary_expression

    LP              shift, and go to state 1
    SUB             shift, and go to state 2
    EXCLAMATION     shift, and go to state 3
    INT_LITERAL     shift, and go to state 4
    DOUBLE_LITERAL  shift, and go to state 5
    STRING_LITERAL  shift, and go to state 6
    IDENTIFIER      shift, and go to state 7
    TRUE_T          shift, and go to state 8
    FALSE_T         shift, and go to state 9

    unary_expression    状態 78 に移行
    postfix_expression  状態 33 に移行
    primary_expression  状態 30 に移行


状態 52

   46 postfix_expression: postfix_expression LP . RP

    RP  shift, and go to state 79


状態 53

   17 assignment_operator: ASSIGN_T .

    $default  規則 17 を使って還元 (assignment_operator)


状態 54

   18 assignment_operator: ADD_ASSIGN_T .

    $default  規則 18 を使って還元 (assignment_operator)


状態 55

   19 assignment_operator: SUB_ASSIGN_T .

    $default  規則 19 を使って還元 (assignment_operator)


状態 56

   20 assignment_operator: MUL_ASSIGN_T .

    $default  規則 20 を使って還元 (assignment_operator)


状態 57

   21 assignment_operator: DIV_ASSIGN_T .

    $default  規則 21 を使って還元 (assignment_operator)


状態 58

   22 assignment_operator: MOD_ASSIGN_T .

    $default  規則 22 を使って還元 (assignment_operator)


状態 59

   47 postfix_expression: postfix_expression INCREMENT .

    $default  規則 47 を使って還元 (postfix_expression)


状態 60

   48 postfix_expression: postfix_expression DECREMENT .

    $default  規則 48 を使って還元 (postfix_expression)


状態 61

   16 assignment_expression: postfix_expression assignment_operator . assignment_expression

    LP              shift, and go to state 1
    SUB             shift, and go to state 2
    EXCLAMATION     shift, and go to state 3
    INT_LITERAL     shift, and go to state 4
    DOUBLE_LITERAL  shift, and go to state 5
    STRING_LITERAL  shift, and go to state 6
    IDENTIFIER      shift, and go to state 7
    TRUE_T          shift, and go to state 8
    FALSE_T         shift, and go to state 9

    assignment_expression      状態 80 に移行
    logical_or_expression      状態 22 に移行
    logical_and_expression     状態 23 に移行
    equality_expression        状態 24 に移行
    relational_expression      状態 25 に移行
    additive_expression        状態 26 に移行
    multiplicative_expression  状態 27 に移行
    unary_expression           状態 28 に移行
    postfix_expression         状態 29 に移行
    primary_expression         状態 30 に移行


状態 62

   49 primary_expression: LP expression RP .

    $default  規則 49 を使って還元 (primary_expression)


状態 63

    5 function_definition: type_specifier IDENTIFIER LP . RP SEMICOLON

    RP  shift, and go to state 81


状態 64

    9 declaration_statement: type_specifier IDENTIFIER ASSIGN_T . expression SEMICOLON

    LP              shift, and go to state 1
    SUB             shift, and go to state 2
    EXCLAMATION     shift, and go to state 3
    INT_LITERAL     shift, and go to state 4
    DOUBLE_LITERAL  shift, and go to state 5
    STRING_LITERAL  shift, and go to state 6
    IDENTIFIER      shift, and go to state 7
    TRUE_T          shift, and go to state 8
    FALSE_T         shift, and go to state 9

    expression                 状態 82 に移行
    assignment_expression      状態 21 に移行
    logical_or_expression      状態 22 に移行
    logical_and_expression     状態 23 に移行
    equality_expression        状態 24 に移行
    relational_expression      状態 25 に移行
    additive_expression        状態 26 に移行
    multiplicative_expression  状態 27 に移行
    unary_expression           状態 28 に移行
    postfix_expression         状態 29 に移行
    primary_expression         状態 30 に移行


状態 65

    8 declaration_statement: type_specifier IDENTIFIER SEMICOLON .

    $default  規則 8 を使って還元 (declaration_statement)


状態 66

   24 logical_or_expression: logical_or_expression LOGICAL_OR logical_and_expression .
   26 logical_and_expression: logical_and_expression . LOGICAL_AND equality_expression

    LOGICAL_AND  shift, and go to state 40

    $default  規則 24 を使って還元 (logical_or_expression)


状態 67

   26 logical_and_expression: logical_and_expression LOGICAL_AND equality_expression .
   28 equality_expression: equality_expression . EQ relational_expression
   29                    | equality_expression . NE relational_expression

    EQ  shift, and go to state 41
    NE  shift, and go to state 42

    $default  規則 26 を使って還元 (logical_and_expression)


状態 68

   28 equality_expression: equality_expression EQ relational_expression .
   31 relational_expression: relational_expression . GT additive_expression
   32                      | relational_expression . GE additive_expression
   33                      | relational_expression . LT additive_expression
   34                      | relational_expression . LE additive_expression

    GT  shift, and go to state 43
    GE  shift, and go to state 44
    LE  shift, and go to state 45
    LT  shift, and go to state 46

    $default  規則 28 を使って還元 (equality_expression)


状態 69

   29 equality_expression: equality_expression NE relational_expression .
   31 relational_expression: relational_expression . GT additive_expression
   32                      | relational_expression . GE additive_expression
   33                      | relational_expression . LT additive_expression
   34                      | relational_expression . LE additive_expression

    GT  shift, and go to state 43
    GE  shift, and go to state 44
    LE  shift, and go to state 45
    LT  shift, and go to state 46

    $default  規則 29 を使って還元 (equality_expression)


状態 70

   31 relational_expression: relational_expression GT additive_expression .
   36 additive_expression: additive_expression . ADD multiplicative_expression
   37                    | additive_expression . SUB multiplicative_expression

    ADD  shift, and go to state 47
    SUB  shift, and go to state 48

    $default  規則 31 を使って還元 (relational_expression)


状態 71

   32 relational_expression: relational_expression GE additive_expression .
   36 additive_expression: additive_expression . ADD multiplicative_expression
   37                    | additive_expression . SUB multiplicative_expression

    ADD  shift, and go to state 47
    SUB  shift, and go to state 48

    $default  規則 32 を使って還元 (relational_expression)


状態 72

   34 relational_expression: relational_expression LE additive_expression .
   36 additive_expression: additive_expression . ADD multiplicative_expression
   37                    | additive_expression . SUB multiplicative_expression

    ADD  shift, and go to state 47
    SUB  shift, and go to state 48

    $default  規則 34 を使って還元 (relational_expression)


状態 73

   33 relational_expression: relational_expression LT additive_expression .
   36 additive_expression: additive_expression . ADD multiplicative_expression
   37                    | additive_expression . SUB multiplicative_expression

    ADD  shift, and go to state 47
    SUB  shift, and go to state 48

    $default  規則 33 を使って還元 (relational_expression)


状態 74

   36 additive_expression: additive_expression ADD multiplicative_expression .
   39 multiplicative_expression: multiplicative_expression . MUL unary_expression
   40                          | multiplicative_expression . DIV unary_expression
   41                          | multiplicative_expression . MOD unary_expression

    MUL  shift, and go to state 49
    DIV  shift, and go to state 50
    MOD  shift, and go to state 51

    $default  規則 36 を使って還元 (additive_expression)


状態 75

   37 additive_expression: additive_expression SUB multiplicative_expression .
   39 multiplicative_expression: multiplicative_expression . MUL unary_expression
   40                          | multiplicative_expression . DIV unary_expression
   41                          | multiplicative_expression . MOD unary_expression

    MUL  shift, and go to state 49
    DIV  shift, and go to state 50
    MOD  shift, and go to state 51

    $default  規則 37 を使って還元 (additive_expression)


状態 76

   39 multiplicative_expression: multiplicative_expression MUL unary_expression .

    $default  規則 39 を使って還元 (multiplicative_expression)


状態 77

   40 multiplicative_expression: multiplicative_expression DIV unary_expression .

    $default  規則 40 を使って還元 (multiplicative_expression)


状態 78

   41 multiplicative_expression: multiplicative_expression MOD unary_expression .

    $default  規則 41 を使って還元 (multiplicative_expression)


状態 79

   46 postfix_expression: postfix_expression LP RP .

    $default  規則 46 を使って還元 (postfix_expression)


状態 80

   16 assignment_expression: postfix_expression assignment_operator assignment_expression .

    $default  規則 16 を使って還元 (assignment_expression)


状態 81

    5 function_definition: type_specifier IDENTIFIER LP RP . SEMICOLON

    SEMICOLON  shift, and go to state 83


状態 82

    9 declaration_statement: type_specifier IDENTIFIER ASSIGN_T expression . SEMICOLON

    SEMICOLON  shift, and go to state 84


状態 83

    5 function_definition: type_specifier IDENTIFIER LP RP SEMICOLON .

    $default  規則 5 を使って還元 (function_definition)


状態 84

    9 declaration_statement: type_specifier IDENTIFIER ASSIGN_T expression SEMICOLON .

    $default  規則 9 を使って還元 (declaration_statement)
